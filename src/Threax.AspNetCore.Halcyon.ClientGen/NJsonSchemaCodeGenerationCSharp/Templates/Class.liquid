{% if HasDescription -%}
/// <summary>{{ Description | csharpdocs }}</summary>
{% endif -%}
{% if HasDiscriminator -%}
[Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "{{ Discriminator }}")]
{% for derivedClass in DerivedClasses -%}
[JsonInheritanceAttribute("{{ derivedClass.Discriminator }}", typeof({{ derivedClass.ClassName }}))]
{% endfor -%}
{% endif -%}
{% if InheritsExceptionSchema -%}
[Newtonsoft.Json.JsonObjectAttribute]
{% endif -%}
{% template Class.Annotations %}
{{ TypeAccessModifier }} {% if IsAbstract %}abstract {% endif %}partial class {{ClassName}} {% template Class.Inheritance %}
{
{% if RenderInpc or RenderPrism -%}
{% for property in Properties -%}
    private {{ property.Type }} {{ property.FieldName }}{% if property.HasDefaultValue %} = {{ property.DefaultValue }}{% endif -%};
{% endfor -%}

{% endif -%}
    {% template Class.Constructor %}
{% if RenderRecord == true -%}
    {% template Class.Constructor.Record %}

{% endif -%}
{% for property in Properties -%}
{%   if property.HasDescription -%}
    /// <summary>{{ property.Description | csharpdocs }}</summary>
{%   endif -%}
    [Newtonsoft.Json.JsonProperty("{{ property.Name }}", Required = {{ property.JsonPropertyRequiredCode }}{% if property.IsStringEnumArray %}, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter){% endif %})]
{%   if property.RenderRequiredAttribute -%}
    [System.ComponentModel.DataAnnotations.Required{% if property.AllowEmptyStrings %}(AllowEmptyStrings = true){% endif %}]
{%   endif -%}
{%   if property.RenderRangeAttribute -%}
    [System.ComponentModel.DataAnnotations.Range({{ property.RangeMinimumValue }}, {{ property.RangeMaximumValue }})]
{%   endif -%}
{%   if property.RenderStringLengthAttribute -%}
    [System.ComponentModel.DataAnnotations.StringLength({{ property.StringLengthMaximumValue }}{% if property.StringLengthMinimumValue > 0 %}, MinimumLength = {{ property.StringLengthMinimumValue }}{% endif %})]
{%   endif -%}
{%   if property.RenderRegularExpressionAttribute -%}
    [System.ComponentModel.DataAnnotations.RegularExpression(@"{{ property.RegularExpressionValue }}")]
{%   endif -%}
{%   if property.IsStringEnum -%}
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
{%   endif -%}
{%   if property.IsDate and UseDateFormatConverter -%}
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
{%   endif -%}
    {% template Class.Property.Annotations %}
    public {{ property.Type }} {{ property.PropertyName }}{% if RenderInpc == false and RenderPrism == false %} { get; {% if property.HasSetter and RenderRecord == false %}set; {% endif %}}{% if property.HasDefaultValue and RenderRecord == false %} = {{ property.DefaultValue }};{% endif %}
{% else %}
    {
        get { return {{ property.FieldName }}; }
{%     if property.HasSetter -%}
{%         if RenderInpc -%}
        {{PropertySetterAccessModifier}}set 
        {
            if ({{ property.FieldName }} != value)
            {
                {{ property.FieldName }} = value; 
                RaisePropertyChanged();
            }
        }
{%         else -%}
        {{PropertySetterAccessModifier}}set { SetProperty(ref {{ property.FieldName }}, value); }
{%         endif -%}
{%     endif -%}
    }
{%   endif -%}

{% endfor -%}
{% if HasAdditionalPropertiesType -%}
    private System.Collections.Generic.IDictionary<string, {{ AdditionalPropertiesType }}> _additionalProperties = new System.Collections.Generic.Dictionary<string, {{ AdditionalPropertiesType }}>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, {{ AdditionalPropertiesType }}> AdditionalProperties
    {
        get { return _additionalProperties; }
        {{PropertySetterAccessModifier}}set { _additionalProperties = value; }
    }
{% endif -%}
{% if GenerateJsonMethods -%}
    {% template Class.ToJson %}
    
    {% template Class.FromJson %}
{% endif -%}
{% if RenderInpc -%}

    {% template Class.Inpc %}
{% endif -%}

    {% template Class.Body %}
}
